:: provided assessment track 2
<html><h5>Refining a provided prompt <i class="fas fa-caret-right"></i></h5></html>
!! Refine part 2
<html>
<p>Now write a follow up prompt refining what you&rsquo;re asking ChatGPT to do. Mention a criterion for effective distractors or other best practices as needed to help ChatGPT produce better content.</p>
<p>Evaluate it based on the criteria for effective distractors (review criteria below if needed). Is the new version is worse/equal/better than the original?</p>
    <form id="provided-track-2" class="pure-form" data-parent="provided-example-track">
        <label for="provided-track-2-opt-1" class="pure-checkbox">
            <input type="radio" name="provided-track-2-choice" id="provided-track-2-opt-1" value="worse-followup-providing-criterion" onclick="checkOptionSelected('provided-track-2')" />Worse
        </label>
        <label for="provided-track-2-opt-2" class="pure-checkbox">
            <input type="radio" name="provided-track-2-choice" id="provided-track-2-opt-2" value="equal-followup-providing-criterion" onclick="checkOptionSelected('provided-track-2')" />Equal 
        </label>
        <label for="provided-track-2-opt-3" class="pure-checkbox">
            <input type="radio" name="provided-track-2-choice" id="provided-track-2-opt-3" value="better-followup-providing-criterion" onclick="checkOptionSelected('provided-track-2')" />Better
        </label>
        <button type="button" onclick="sendFormXAPIStatement('provided-track-2'); checkOptionSelected('provided-track-2'); customButtonHandler('provided assessment track 2 freeform')" id="provided-track-2-submit" class="pure-button pure-button-primary" disabled>Submit your choice</button>
    </form><br >
<div class="dropdown-container">
  <div class="dropdown-header" onclick="toggleContent()">
    <h3><span class="light-gray-text">Review the criteria</span></h3>
    <span class="arrow">&#9662;</span>
  </div>
  <div id="provided-track-2-a-content-dropdown" class="dropdown-text-content" style="display: none;">
    <p>Use the criteria below to evaluate ChatGPT&rsquo;s assessment questions.</p>
    <div class="tip-box">
        <div class="tip-icon">
            <i class="fas fa-pen"></i>
        </div>
        <div class="tip-content">
            <h3 class="tip-title">Evaluation criteria</h3>
                <ul>
                <li>Write options that are congruent in length.</li>
                <li>Write options that use parallel grammatical structure (e.g. if answer(s) start with a verb, so should the distractors).</li>
                <li>Avoid &ldquo;True/False,&rdquo; “All of the Above,” or “Both A and B Only” (or other such combinations).</li>
                <li>Use plausible but incorrect distractors.</li>
                <li>Use only truly correct answers.</li>
                <li>Avoid negative phrasing.</li>
            </ul>
        </div>
    </div>
    <p>Review assessment writing best practices at these external resources before moving on:</p>
    <ul>
        <li><a id="vanderbilt-external-link-review-1" class="external-link" href="https://cft.vanderbilt.edu/guides-sub-pages/writing-good-multiple-choice-test-questions/" target="blank">Writing Good Multiple Choice Test Questions - Vanderbilt University Center for Teaching</a></li>
        <li><a id="conneticut-external-link-review-1" class="external-link" href="https://kb.ecampus.uconn.edu/2020/09/30/writing-effective-multiple-choice-questions-2/" target="blank">Writing Effective Multiple Choice Questions - University of Connecticut Knowledge Base</a></li>
    </ul>
  </div>
</div>
</html> 

<script>
setTimeout(function() {
    const copyButtons = document.querySelectorAll(".copyButton");

    copyButtons.forEach(button => {
        button.addEventListener("click", function() {
            const text = this.parentElement.nextElementSibling.innerText;
            navigator.clipboard.writeText(text)
                .then(() => {
                    console.log("Text copied to clipboard");
                    const copiedMessage = this.nextElementSibling;
                    setTimeout(() => {
                        copiedMessage.classList.remove("show");
                    }, 1000);
                    this.innerText = "Copied";
                    this.classList.add("copied");
                })
                .catch(err => {
                    console.error("Error copying text: ", err);
                });
        });
    });
}, 100);
</script>
<script>
function toggleContent() {
  const content = document.getElementById('provided-track-2-a-content-dropdown');
  const arrow = document.querySelector('.arrow');

  if (content.style.display === 'none') {
    content.style.display = 'block';
    arrow.classList.add('arrow-up');
  } else {
    content.style.display = 'none';
    arrow.classList.remove('arrow-up');
  }
}
</script>